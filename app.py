from flask import Flask, request, jsonify, render_template, send_from_directory
from PIL import Image, ImageDraw, ImageFont
import os
import time

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
BASE_DIR = os.path.dirname(os.path.abspath(__file__)) 

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask App
app = Flask(__name__)

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ---
TEMPLATE_IMAGE_PATH = os.path.join(BASE_DIR, 'template.png')
OUTPUT_DIR_NAME = 'generated_images'
OUTPUT_DIR = os.path.join(BASE_DIR, OUTPUT_DIR_NAME)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
if not os.path.exists(OUTPUT_DIR): 
    os.makedirs(OUTPUT_DIR, exist_ok=True) 

# üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå THSarabunNew.ttf ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'templates'
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå 'thsarabunnew.ttf' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'templates' ‡πÉ‡∏ô GitHub ‡πÅ‡∏•‡πâ‡∏ß
FONT_NAME = 'thsarabunnew.ttf'
DEFAULT_FONT_PATH = os.path.join(BASE_DIR, 'templates', FONT_NAME) 

DEFAULT_FONT_SIZE = 60
# -----------------------------------

@app.route('/')
def index():
    return render_template('index.html') 


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏µ #RRGGBB ‡πÄ‡∏õ‡πá‡∏ô Tuple (R, G, B)
def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))


@app.route('/generate-image', methods=['POST'])
def generate_image():
    # 1. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Front-end
    try:
        data = request.get_json()
        user_text = data.get('user_text', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤')
        font_size = int(data.get('font_size', DEFAULT_FONT_SIZE))
        text_align = data.get('text_align', 'left')
        bg_color_hex = data.get('bg_color', 'template')
        text_color_hex = data.get('text_color', '#000000')

    except Exception as e:
        return jsonify({"error": f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (JSON) ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}"}), 400
    
    # 2. ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô
    try:
        if bg_color_hex == 'template':
            img = Image.open(TEMPLATE_IMAGE_PATH).convert("RGBA")
            width, height = img.size
        else:
            width, height = 1000, 600 
            img = Image.new('RGBA', (width, height), hex_to_rgb(bg_color_hex) + (255,))
    except FileNotFoundError:
        return jsonify({"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Template: template.png. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!"}), 500
    except Exception as e:
        return jsonify({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û: {str(e)}"}), 500

    draw = ImageDraw.Draw(img)
    
    # 3. ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå (‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏á)
    try:
        if DEFAULT_FONT_PATH and os.path.exists(DEFAULT_FONT_PATH):
            FONT = ImageFont.truetype(DEFAULT_FONT_PATH, size=font_size) 
        else:
            # Fallback ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            FONT = ImageFont.load_default() 
            print(f"Warning: Custom font not found at {DEFAULT_FONT_PATH}. Using default font.")
            
    except IOError as e:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î IOError (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏™‡∏µ‡∏¢)
        FONT = ImageFont.load_default() 
        print(f"Error loading custom font: {e}. Using default font.")
        
    text_color_rgb = hex_to_rgb(text_color_hex)
    
    # 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    # ‡πÉ‡∏ä‡πâ font.getbbox() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    try:
        bbox = draw.textbbox((0, 0), user_text, font=FONT)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

    except Exception:
        # Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå load_default() ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bbox
        text_width, text_height = draw.textsize(user_text, font=FONT)
        print("Warning: Using fallback for text size calculation.")

    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì X ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    margin = 50 
    if text_align == 'center':
        position_x = (width - text_width) / 2
    elif text_align == 'right':
        position_x = width - text_width - margin
    else: 
        position_x = margin
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Y ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û 
    position_y = (height - text_height) / 2
    
    # 5. ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û
    draw.text((position_x, position_y), user_text, font=FONT, fill=text_color_rgb)
    
    # 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    output_filename = f"result_{int(time.time())}_{os.getpid()}.png"
    output_path = os.path.join(OUTPUT_DIR, output_filename)
    
    try:
        img.save(output_path)
    except Exception as e:
        return jsonify({"error": f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ: {str(e)}"}), 500
    
    # 7. ‡∏™‡πà‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    image_url = f"/images/{output_filename}" 
    return jsonify({"image_url": image_url})


# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ Front-end ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
@app.route('/images/<filename>')
def serve_generated_image(filename):
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud, ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå generated_images
    return send_from_directory(OUTPUT_DIR, filename)
